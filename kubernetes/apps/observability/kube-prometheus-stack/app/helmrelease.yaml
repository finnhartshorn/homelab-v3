---
# yaml-language-server: $schema=https://kubernetes-schemas.pages.dev/helm.toolkit.fluxcd.io/helmrelease_v2.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
spec:
  interval: 30m
  chart:
    spec:
      chart: kube-prometheus-stack
      version: 70.10.0
      sourceRef:
        kind: HelmRepository
        name: prometheus-community
        namespace: flux-system
  install:
    crds: Skip
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    crds: Skip
    remediation:
      retries: 3
  dependsOn:
    - name: prometheus-operator-crds
      namespace: observability
  values:
    crds:
      enabled: false
    cleanPrometheusOperatorObjectNames: true
    alertmanager:
      fullnameOverride: alertmanager
      ingress:
        enabled: true
        ingressClassName: internal
        annotations:
          ## Enable Oauth2 Authentication
          nginx.ingress.kubernetes.io/auth-url: "http://oauth2-proxy.security.svc.cluster.local:4180/oauth2/auth"
          nginx.ingress.kubernetes.io/auth-signin: "https://auth.${SECRET_DOMAIN}/oauth2/auth/oauth2/start?rd=$scheme://$host$request_uri"
          ##
          gethomepage.dev/enabled: "true"
          gethomepage.dev/group: Observability
          gethomepage.dev/name: Alertmanager
          gethomepage.dev/app: alertmanager
          gethomepage.dev/description: "Handles alerts sent by client applications"
          gethomepage.dev/icon: alertmanager.svg
          gethomepage.dev/widget.type: customapi
          gethomepage.dev/widget.url: http://alertmanager-operated.observability.svc.cluster.local:9093/api/v2/alerts
          gethomepage.dev/widget.mappings.0.label: Alerts
          gethomepage.dev/widget.mappings.0.format: size
        hosts: ["alertmanager.${SECRET_DOMAIN}"]
        pathType: Prefix
      alertManagerSpec:
        # TODO: [kube-pro-stack] Add config secret
        storage:
          volumeClaimTemplate:
            spec:
              storageClassName: longhorn
              resources:
                requests:
                  storage: 1Gi
    kubelet:
      enabled: true
      serviceMonitor:
        metricRelabelings:
          # Drop high cardinality labels
          - action: labeldrop
            regex: (uid)
          - action: labeldrop
            regex: (id|name)
          - action: drop
            sourceLabels: ["__name__"]
            regex: (rest_client_request_duration_seconds_bucket|rest_client_request_duration_seconds_sum|rest_client_request_duration_seconds_count)
    kubeApiServer:
      enabled: true
      serviceMonitor:
        metricRelabelings:
          # Drop high cardinality labels
          - action: drop
            sourceLabels: ["__name__"]
            regex: (apiserver|etcd|rest_client)_request(|_sli|_slo)_duration_seconds_bucket
          - action: drop
            sourceLabels: ["__name__"]
            regex: (apiserver_response_sizes_bucket|apiserver_watch_events_sizes_bucket)
    kubeControllerManager:
      enabled: true
      endpoints: &cp
        - 192.168.1.222
        # - 192.168.1.201
        # - 192.168.1.203 // Add third node post migration
        # - 192.168.1.204
      serviceMonitor:
        metricRelabelings:
          # Remove duplicate labels provided by k8s
          - action: keep
            sourceLabels: ["__name__"]
            regex: "(apiserver_audit|apiserver_client|apiserver_delegated|apiserver_envelope|apiserver_storage|apiserver_webhooks|attachdetach_controller|authenticated_user|authentication|cronjob_controller|disabled_metric|endpoint_slice|ephemeral_volume|garbagecollector_controller|get_token|go|hidden_metric|job_controller|kubernetes_build|kubernetes_feature|leader_election|node_collector|node_ipam|process_cpu|process_max|process_open|process_resident|process_start|process_virtual|pv_collector|registered_metric|replicaset_controller|rest_client|retroactive_storageclass|root_ca|running_managed|scrape_duration|scrape_samples|scrape_series|service_controller|storage_count|storage_operation|ttl_after|volume_operation|workqueue)_(.+)"
    kubeEtcd:
      enabled: true
      endpoints: *cp
    kubeScheduler:
      enabled: true
      endpoints: *cp
    kubeProxy:
      enabled: false
    prometheus:
      fullnameOverride: prometheus
      ingress:
        enabled: true
        hosts: ["prometheus.${SECRET_DOMAIN}"]
        annotations:
          gethomepage.dev/enabled: "true"
          gethomepage.dev/group: Observability
          gethomepage.dev/name: Prometheus
          gethomepage.dev/description: "Monitoring scrape service"
          gethomepage.dev/icon: prometheus.png
          gethomepage.dev/app: prometheus
          gethomepage.dev/widget.type: prometheus
          gethomepage.dev/widget.url: http://kube-prometheus-stack-prometheus.observability.svc.cluster.local:9090
        pathType: Prefix
      prometheusSpec:
        scrapeInterval: 1m # Must match interval in Grafana Helm chart
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        scrapeConfigSelectorNilUsesHelmValues: false
        enableAdminAPI: true
        walCompression: true
        enableFeatures:
          - auto-gomemlimit
          - memory-snapshot-on-shutdown
          - new-service-discovery-manager
        additionalScrapeConfigs: |
          - job_name: 'static-windows-exporter'
            scheme: http
            static_configs:
              - targets: ['192.168.1.211:9182']
        retention: 8d
        retentionSize: 40GB
        resources:
          requests:
            cpu: 100m
            memory: 2Gi
          limits:
            memory: 3Gi
        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: longhorn
              resources:
                requests:
                  storage: 10Gi
    nodeExporter:
      enabled: true
    prometheus-node-exporter:
      fullnameOverride: node-exporter
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels: ["__meta_kubernetes_pod_node_name"]
              targetLabel: kubernetes_node
    kubeStateMetrics:
      enabled: true
    kube-state-metrics:
      fullnameOverride: kube-state-metrics
      metricLabelsAllowlist:
        - pods=[*]
        - deployments=[*]
        - persistentvolumeclaims=[*]
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels: ["__meta_kubernetes_pod_node_name"]
              targetLabel: kubernetes_node
    grafana:
      enabled: false
      forceDeployDashboards: true
      sidecar:
        dashboards:
          annotations:
            grafana_folder: Kubernetes
          multicluster:
            etcd:
              enabled: true